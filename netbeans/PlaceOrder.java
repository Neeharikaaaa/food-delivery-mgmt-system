/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package food;
import javax.swing.*;
import java.sql.*;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JFrame;
import java.awt.BorderLayout;
import java.util.ArrayList;
//import org.apache.commons.dbutils.DbUtils;
import net.proteanit.sql.DbUtils;

// TableModelHelper.java
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;

/**
 *
 * @author Ambica7400
 */
public class PlaceOrder extends javax.swing.JFrame {

    /**
     * Creates new form PlaceOrder
     */
    
    Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
    int c1,r1,b1;
    
    private DefaultTableModel model;
    
    public PlaceOrder(int c, int r, int b) {
        initComponents();
        c1 = c;
        r1 = r;
        b1 = b;
        cid.setText(String.valueOf(c));
        rid.setText(String.valueOf(r));
        bid.setText(String.valueOf(b));
        try
        {
            Class.forName("oracle.jdbc.OracleDriver");
            //JOptionPane.showMessageDialog(this,"Driver Loaded!");
            try {
            con = DriverManager.getConnection("jdbc:oracle:thin:@DESKTOP-E58UQJS:1521:orcl",
                    "hr","A174");
            //JOptionPane.showMessageDialog(this,"Connected to Oracle database!");
            }
            catch (SQLException ex) {
            Logger.getLogger(Food.class.getName()).log(Level.SEVERE,null, ex);
            JOptionPane.showMessageDialog(this,ex.getMessage());
            }
        }
        catch(ClassNotFoundException ex)
        {
            Logger.getLogger(Food.class.getName()).log(Level.SEVERE,null, ex);
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }
    }
    
    public void getAllItemsOfRest (int restid, int branid)
    {
        String sql = "SELECT iname,price FROM item where rid="+restid+" and bid="+branid;
        try
        {              
                boolean hasResults = false;
                ps = con.prepareStatement(sql);
                rs = ps.executeQuery(sql);
                model = (DefaultTableModel)jTable1.getModel();
                model.setRowCount(0);
                while (rs.next())
                {

                    hasResults = true;
                    model.addRow (new Object[] {rs.getString("iname"), rs.getDouble("price")});
                }
                if (hasResults==false) {
                    JOptionPane.showMessageDialog(null, "No items found for the given restaurant and branch IDs.");
                } else {
                    //JOptionPane.showMessageDialog(null, "Items added to table.");
                }
            }
            
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                e.printStackTrace();
            }
        
    }
    
    private void refresh ()
    {
        namefield.setText("");
        price.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cid = new javax.swing.JTextField();
        rid = new javax.swing.JTextField();
        bid = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        namefield = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        qty = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        totalcalc = new javax.swing.JTextField();
        confirmorder = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        clearcart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Customer ID");

        jLabel2.setText("Restaurant ID");

        jLabel3.setText("Branch ID");

        cid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cidActionPerformed(evt);
            }
        });

        rid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ridActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Item", "Price"
            }
        ));
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel5.setText("Name");

        jLabel6.setText("Price");

        jLabel7.setText("Quantity");

        namefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namefieldActionPerformed(evt);
            }
        });

        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });

        qty.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qtyStateChanged(evt);
            }
        });

        jButton1.setText("Clear Item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add To Cart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtocartActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Qty", "Total"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel8.setText("Total");

        totalcalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalcalcActionPerformed(evt);
            }
        });

        confirmorder.setText("Confirm Order");
        confirmorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmorderActionPerformed(evt);
            }
        });

        jButton4.setText("Search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Exit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        clearcart.setText("Clear Cart");
        clearcart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearcartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(rid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                            .addComponent(cid, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bid)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(47, 47, 47)
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(41, 41, 41)
                                .addComponent(namefield, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(148, 148, 148))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(46, 46, 46)
                                .addComponent(clearcart, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(86, 86, 86))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(totalcalc, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(confirmorder, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37)
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(clearcart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(totalcalc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmorder, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addContainerGap(10, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(rid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(bid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addGap(46, 46, 46))
        );

        cid.getAccessibleContext().setAccessibleName("cid");
        rid.getAccessibleContext().setAccessibleName("rid");
        bid.getAccessibleContext().setAccessibleName("bid");
        namefield.getAccessibleContext().setAccessibleName("itemname");
        price.getAccessibleContext().setAccessibleName("itemprice");
        qty.getAccessibleContext().setAccessibleName("userqty");
        totalcalc.getAccessibleContext().setAccessibleName("totalprice");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addtocartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtocartActionPerformed
        // TODO add your handling code here:
        PreparedStatement ps1=null;
        ResultSet rs1=null;
        PreparedStatement ps2=null;
        ResultSet rs2=null;
        //String sql = "insert into bill values ('apple Pie',90,3,270)";
        String sql;
        
        try{
            String addtobill = "{call add_to_bill(?, ?)}";
            CallableStatement cstmt = con.prepareCall(addtobill);
            cstmt.setString(1, namefield.getText());  
            cstmt.setInt(2,(Integer)qty.getValue());  
            cstmt.execute();
            //rs.close();
            cstmt.close();
        }
        catch (SQLException | NumberFormatException ex) {
                    Logger.getLogger(Food.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
                }
        
        
        String sql1 = "select name,price,qty,total from bill";
        try
        {              
                boolean hasResults = false;
                ps1 = con.prepareStatement(sql1);
                rs1 = ps1.executeQuery(sql1);
                model = (DefaultTableModel)jTable2.getModel();
                model.setRowCount(0);
                while (rs1.next())
                {
                    hasResults = true;
                    model.addRow (new Object[] {rs1.getString("name"), rs1.getDouble("price"), rs1.getInt("qty"),rs1.getDouble("total")});

                }
                if (hasResults==false) {
                    JOptionPane.showMessageDialog(null, "No items found for the given restaurant and branch IDs.");
                } else {
                    //JOptionPane.showMessageDialog(null, "Items added to table.");
                }
            }
            
            catch (SQLException e)
            {
                //JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                e.printStackTrace();
            }
        
        try
        {              
            boolean hasResults = false;
            ps2 = con.prepareStatement(sql1);
            rs2 = ps2.executeQuery(sql1);
            model = (DefaultTableModel)jTable2.getModel();
            model.setRowCount(0);
            while (rs2.next())
            {
                hasResults = true;
                model.addRow (new Object[] {rs2.getString("name"), rs2.getDouble("price"), rs2.getInt("qty"),rs2.getDouble("total")});

            }
            if (hasResults==false) {
                JOptionPane.showMessageDialog(null, "No items found for the given restaurant and branch IDs.");
            } else {
                //JOptionPane.showMessageDialog(null, "Items added to table.");
            }
        }

        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            e.printStackTrace();
        }
        
        try{
            String sql8 = "SELECT sum(total) as sumtotal from bill";
            ps = con.prepareStatement(sql8);
            rs = ps.executeQuery();
            if (rs.next()) {
                totalcalc.setText(String.valueOf(rs.getInt("sumtotal")));
            } else {
                JOptionPane.showMessageDialog(null, "Can't calculate total");
            }
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null, "Error executing SQL query: " + e.getMessage());
        }
        
        refresh();
    }//GEN-LAST:event_addtocartActionPerformed
    
    private void cidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cidActionPerformed

    private void ridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ridActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ridActionPerformed

    private void qtyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qtyStateChanged
        // TODO add your handling code here:
        int quantity = (Integer)qty.getValue();
        if (quantity<=1)
        {
            qty.setValue(1);
            quantity=1;
            //productTotal = productPrice * quantity;
            //-----.setText(String.valueOf(productTotal));
        }
    }//GEN-LAST:event_qtyStateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String r = rid.getText();
        int ri = Integer.parseInt(r);
        String b = bid.getText();
        int bi = Integer.parseInt(b);
        getAllItemsOfRest (ri,bi);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        // TODO add your handling code here:
        //select price from item where iname = name and rid = rid and bid = bid;
        
    }//GEN-LAST:event_priceActionPerformed

    private void namefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namefieldActionPerformed
        // TODO add your handling code here:
        String n = namefield.getText();
        String r = rid.getText();
        int ri = Integer.parseInt(r);
        String b = bid.getText();
        int bi = Integer.parseInt(b);
        try{
        //String sql = "select price from item where iname = "+n+" and rid = "+ri+" and bid = "+bi;
        String sql = "SELECT price FROM item WHERE iname = ? AND rid = ? AND bid = ?";
        ps = con.prepareStatement(sql);
        ps.setString(1, n); // Assuming n is the item name
        ps.setInt(2, ri); // Assuming ri is the restaurant ID
        ps.setInt(3, bi); // Assuming bi is the bill ID
        rs = ps.executeQuery();
        //price.setText(String.valueOf(rs.getInt("price")));
        if (rs.next()) {
            price.setText(String.valueOf(rs.getInt("price")));
        } else {
            JOptionPane.showMessageDialog(null, "No price found for the given item, restaurant, and bill.");
        }
        }
        catch (SQLException e)
        {
            JOptionPane.showMessageDialog(null, "Error executing SQL query: " + e.getMessage());
        }
    }//GEN-LAST:event_namefieldActionPerformed

    private void clearcartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearcartActionPerformed
        // TODO add your handling code here:
        clearBill();
    }//GEN-LAST:event_clearcartActionPerformed

    private void confirmorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmorderActionPerformed
        // TODO add your handling code here:        
        /*Payment pobj = new Payment ();
        pobj.show();*/
        int msg1 = Integer.parseInt(rid.getText());
        int msg2 = Integer.parseInt(bid.getText());
        int msg3 = Integer.parseInt(cid.getText());
        new Payment (msg1,msg2,msg3).setVisible(true);
        setVisible(false);
        //clearBill();
        dispose();
    }//GEN-LAST:event_confirmorderActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void totalcalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalcalcActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_totalcalcActionPerformed

    private void clearBill ()
    {
        String sql7 = "delete from bill";
        try  {
            ps = con.prepareStatement(sql7);
            int rowsAffected = ps.executeUpdate();
            //JOptionPane.showMessageDialog(null, "Deleted " + rowsAffected + " rows from bill.");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error executing SQL query: " + e.getMessage());
            e.printStackTrace();
        }
        
        PreparedStatement ps3 = null; ResultSet rs3 = null;
        String sql6 = "select name,price,qty,total from bill";
        try
        {              
                boolean hasResults = false;
                ps3 = con.prepareStatement(sql6);
                rs3 = ps3.executeQuery(sql6);
                model = (DefaultTableModel)jTable2.getModel();
                model.setRowCount(0);
                while (rs3.next())
                {
                    hasResults = true;
                    model.addRow (new Object[] {rs3.getString("name"), rs3.getDouble("price"), rs3.getInt("qty"),rs3.getDouble("total")});
                    break;
                }              
            }
            
            catch (SQLException e)
            {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                e.printStackTrace();
            }
        refresh();
    }
    
    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlaceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlaceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlaceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlaceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlaceOrder(c1,r1,b1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bid;
    private javax.swing.JTextField cid;
    private javax.swing.JButton clearcart;
    private javax.swing.JButton confirmorder;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField namefield;
    private javax.swing.JTextField price;
    private javax.swing.JSpinner qty;
    private javax.swing.JTextField rid;
    private javax.swing.JTextField totalcalc;
    // End of variables declaration//GEN-END:variables
}
